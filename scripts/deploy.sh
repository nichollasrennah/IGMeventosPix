#!/bin/bash

# Deploy script para VPS com Docker
set -e

echo "üöÄ Iniciando deploy Docker..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n√£o est√° instalado!${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose n√£o est√° instalado!${NC}"
    exit 1
fi

# Verificar se arquivo .env existe
if [ ! -f .env ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Arquivo .env n√£o encontrado!${NC}"
    echo "Copiando .env.example para .env..."
    cp .env.example .env
    echo -e "${YELLOW}üìù Configure suas vari√°veis em .env antes de continuar!${NC}"
    exit 1
fi

# Verificar se certificados existem
if [ ! -d "certs" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Diret√≥rio 'certs' n√£o encontrado!${NC}"
    mkdir -p certs
    echo -e "${YELLOW}üìã Coloque seus certificados Sicredi no diret√≥rio 'certs/'${NC}"
    exit 1
fi

# Pull das mudan√ßas do Git (se estiver em reposit√≥rio)
if [ -d ".git" ]; then
    echo -e "${YELLOW}üì• Atualizando c√≥digo do reposit√≥rio...${NC}"
    git pull origin main || echo -e "${YELLOW}‚ö†Ô∏è Falha ao fazer git pull (continuando...)${NC}"
fi

# Parar containers existentes
echo -e "${YELLOW}üõë Parando containers existentes...${NC}"
docker-compose down --remove-orphans

# Limpar imagens antigas (opcional)
echo -e "${YELLOW}üßπ Limpando imagens Docker antigas...${NC}"
docker system prune -f

# Build das novas imagens
echo -e "${YELLOW}üî® Construindo imagens Docker...${NC}"
docker-compose build --no-cache

# Iniciar servi√ßos
echo -e "${YELLOW}‚ñ∂Ô∏è Iniciando containers...${NC}"
docker-compose up -d

# Aguardar inicializa√ß√£o
echo -e "${YELLOW}‚è≥ Aguardando inicializa√ß√£o dos servi√ßos...${NC}"
sleep 30

# Verificar status dos services
echo -e "${YELLOW}üîç Verificando status dos containers...${NC}"
docker-compose ps

# Health checks
echo -e "${YELLOW}üè• Executando health checks...${NC}"

# Verificar PIX Service
PIX_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/health?service=pix || echo "000")
if [ "$PIX_HEALTH" = "200" ]; then
    echo -e "${GREEN}‚úÖ PIX Service: Healthy${NC}"
else
    echo -e "${RED}‚ùå PIX Service: Unhealthy (HTTP $PIX_HEALTH)${NC}"
fi

# Verificar WhatsApp Service  
WA_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/health?service=whatsapp || echo "000")
if [ "$WA_HEALTH" = "200" ]; then
    echo -e "${GREEN}‚úÖ WhatsApp Service: Healthy${NC}"
else
    echo -e "${RED}‚ùå WhatsApp Service: Unhealthy (HTTP $WA_HEALTH)${NC}"
fi

# Verificar Nginx
NGINX_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/ping || echo "000")
if [ "$NGINX_HEALTH" = "200" ]; then
    echo -e "${GREEN}‚úÖ Nginx Proxy: Healthy${NC}"
else
    echo -e "${RED}‚ùå Nginx Proxy: Unhealthy (HTTP $NGINX_HEALTH)${NC}"
fi

# Mostrar logs recentes
echo -e "${YELLOW}üìã Logs recentes:${NC}"
docker-compose logs --tail=20

echo -e "${GREEN}üéâ Deploy conclu√≠do!${NC}"
echo -e "${GREEN}üåê Aplica√ß√£o dispon√≠vel em: http://$(hostname -I | awk '{print $1}')${NC}"
echo -e "${GREEN}üì± Interface WhatsApp: http://$(hostname -I | awk '{print $1}')/whatsapp-qr${NC}"

# Comandos √∫teis
echo -e "${YELLOW}üìã Comandos √∫teis:${NC}"
echo "  docker-compose logs -f              # Ver logs em tempo real"
echo "  docker-compose restart pix-service  # Reiniciar PIX service"
echo "  docker-compose restart whatsapp-service # Reiniciar WhatsApp service"
echo "  docker-compose down                 # Parar todos os containers"
echo "  docker-compose up -d                # Iniciar containers"